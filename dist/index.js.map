{
  "version": 3,
  "sources": ["../lib/polyval_p.js", "../lib/polyval_q.js", "../lib/klog.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar polyvalP = require( './polyval_p.js' );\nvar polyvalQ = require( './polyval_q.js' );\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 1/3\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction klog( x ) {\n\tvar hfsq;\n\tvar t1;\n\tvar t2;\n\tvar hx;\n\tvar f;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\thx = getHighWord( x );\n\tf = x - 1.0;\n\tif ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn f * f * ( ( ONE_THIRD*f )- 0.5 );\n\t}\n\ts = f / ( 2.0 + f );\n\tz = s * s;\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\treturn ( s * (hfsq+R) ) - hfsq;\n\t}\n\treturn s * (R-f);\n}\n\n\n// EXPORTS //\n\nmodule.exports = klog;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar setLowWord = require( '@stdlib/number-float64-base-set-low-word' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar HIGH_SIGNIFICAND_MASK = require( '@stdlib/constants-float64-high-word-significand-mask' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar klog = require( './klog.js' );\n\n\n// VARIABLES //\n\nvar TWO54 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000\nvar IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000\nvar IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the binary logarithm (base two).\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log2( 4.0 );\n* // returns 2.0\n*\n* @example\n* var v = log2( 8.0 );\n* // returns 3.0\n*\n* @example\n* var v = log2( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log2( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = log2( NaN );\n* // returns NaN\n*\n* @example\n* var v = log2( -4.0 );\n* // returns NaN\n*/\nfunction log2( x ) {\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar lx;\n\tvar f;\n\tvar i;\n\tvar k;\n\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: x < 2**-1022\n\t\tif ( ( (hx&ABS_MASK) | lx ) === 0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up x:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( (hx>>20) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize x or x/2...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += (i>>20)|0; // asm type annotation\n\tf = klog( x );\n\tx -= 1;\n\thi = setLowWord( x, 0 );\n\tlo = x - hi;\n\treturn ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;\n}\n\n\n// EXPORTS //\n\nmodule.exports = log2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the binary logarithm (base two).\n*\n* @module @stdlib/math-base-special-log2\n*\n* @example\n* var log2 = require( '@stdlib/math-base-special-log2' );\n*\n* var v = log2( 4.0 );\n* // returns 2.0\n*\n* v = log2( 8.0 );\n* // returns 3.0\n*\n* v = log2( 0.0 );\n* // returns -Infinity\n*\n* v = log2( Infinity );\n* // returns Infinity\n*\n* v = log2( NaN );\n* // returns NaN\n*\n* v = log2( -4.0 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar log2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = log2;\n"],
  "mappings": "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",
  "names": ["require_polyval_p", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_q", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_klog", "__commonJSMin", "exports", "module", "getHighWord", "polyvalP", "polyvalQ", "HIGH_SIGNIFICAND_MASK", "ONE_THIRD", "klog", "x", "hfsq", "t1", "t2", "hx", "f", "s", "z", "R", "w", "i", "j", "require_main", "__commonJSMin", "exports", "module", "getHighWord", "setHighWord", "setLowWord", "toWords", "isnan", "ABS_MASK", "HIGH_SIGNIFICAND_MASK", "BIAS", "NINF", "klog", "TWO54", "IVLN2HI", "IVLN2LO", "HIGH_MAX_NORMAL_EXP", "HIGH_MIN_NORMAL_EXP", "HIGH_BIASED_EXP_0", "WORDS", "log2", "x", "hi", "lo", "hx", "lx", "f", "i", "k", "log2"]
}
